div#of-docs.row
	div.col-md-2#of-docs-side
		div.affix
			div.panel.panel-default
				div.panel-heading
					h2 Navigation
				div.panel-body#of-docs-body
					ul#of-docs-nav.nav

	div#of-docs-content.col-md-10(data-spy="affix")
		div.panel.panel-default
			div.panel-body
				h1#introduction Introduction
				p The world of today is as connected as it was never before. But not only most of the civilized physical locations are connected 
					| to a global network, the people who live there are too. It is common that people are online all day and communicate in a frequency and an
					| extent that is unprecedented. Due to the creation of new services like 
					strong multimedia applications
					| ,
					strong cloud storage
					|  and 
					strong social media
					| , the amount of data that is related to a portion of
					| communication increased and people are becoming more and more interested in these new
					| technologies. This leads to a situation, where switching hardware and software is facing
					| higher demands and therefore getting more complex, more expensive and harder to manage. With the increasing numbers of stakeholders for these networks, new challenges arise
					| at the same speed that smart solutions to prior issues are created. For example 
					strong real-time multimedia-applications
					|  served people’s demands for direct communication over thousands
					| of kilometres and numerous political borders. At the same time these innovations put an
					| enormous load on networks that therefore require more intelligent ways to distribute the
					| traffic and optimize the amount of data transmitted. There is only one way to have an
					| edge in this race and this is by using a new paradigm.
				p The common goal is to adapt the speed of innovation to the growth of the system’s complexity and associated technical issues. The first successful concept that addresses these challenges was 
					strong Software Defined Networking (SDN)
					|, which emerged in 2008. This invention drives the programmability, scalability, and flexibility of future networks. The main
					| difference to traditional networks is that there is a 
					strong separation of the network’s control and data plane
					|. This means that most of the logic has moved to a central instance, the
					| so-called controller, whereas the duties of physical switching devices are limited to executing a well-defined set of instructions and communicating with the controller. Managing
					| a network stack is therefore getting easier for all kinds of stakeholders, e.g. governments,
					| universities, service providers, and individuals. Another result is that these parties are able
					| to bypass the process telecommunication standardization, as they are able to change the
					| network’s software on the fly. Naturally, standardization is necessary and also part of the
					| SDN approach. But nevertheless the slow nature of this process has been one of the major
					| impediments of innovation and can be avoided using this new paradigm.				
				p As a first implementation of these new characteristics of SDN, 
					strong Stanford University
					|  developed 
					strong OpenFlow
					|  and is now one of the famoust pioneers in this area. The interest
					| in these scalable, flexible and programmable solutions for current and future networking
					| issues increased since then and resulted in the creation of many different controllers that
					| all have a unified interface, but differ in their concrete implementation. One highlight of
					| this development was that even 
					strong Google
					|  started moving its backbone networks to OpenFlow
					| in 2010 and finally completed this transition in 2012 with 100% of their network running 
					strong OpenFlow
					| .
				p Networking in general and subjects like flows, links and data in particular, are abstract
					| concepts that are hard to understand and evaluate for humans. Although these are abstract things, they actually belong to real objects and sizes like cables, hosts, ports and
					| voltages. Nevertheless this relationship does not help while judging the state of a network
					| and inspecting related activities. During the first days of computer networking, administrators relied purely on textual representations and even today they stick to those, from
					| time to time. With visual perception being the sense with the highest "bandwidth", it
					| is for sure the best way to transport information. Consequently, it is sensible to visualize
					| these abstract concepts in order to make them better accessible. As we are dealing with 
					strong Software Defined Networks
					| , which are adaptive systems that are extremely dynamic, there
					| is a need for an appealing and information-rich interface.

				p The current range of available visualization solutions is not that exhaustive. There are a few desktop-based solutions like
					| ENVI &amp; 
					a(href="http://archive.openflow.org/wk/index.php/LAVI",target="_blank") LAVI
					| , but they provide only basic information and require some installation effort. Other solutions,
					| like this one are based on web technology. Amongst them is the Floodlight GUI, that comes with the 
					a(href="http://www.projectfloodlight.org/floodlight/",target="_blank") Floodlight 
					| controller.
					| This work is inspired by these solutions and by the work that was previously done at the 
					a(href="http://www.nt.uni-saarland.de/") Telecommunications Lab
					| . In particular the first prototype visualization by 
					a(href="http://www.nt.uni-saarland.de/en/people/staff/michael-karl.html") Michael Karl
					|  yielded many experiences with the topic, which could be used for the redesign.

				p This application is able to fulfill the needs of all kinds of users ranging
					| from network planners over decision-makers to network engineers.
					| It employs cutting-edge web technology and offers many ways to interact with the
					| network.

				hr

				h1#features Features
				ul
					li Near-Real-Time updates of the network model.
					li Interactive topology map.
					li Clear statistics view with search capabilites.
					li In-depth detail views.

				hr

				h1#usage Using this application

				h2#usage-views Views

				h3 Topology
				p This view enables the user to get a clear overview of the network. In particular, clients, 
					| switches, links and flows are visualized there. The nodes represent physical or virtual 
					| devices that are connected via links. The flows are listed besides the map and hovering 
					| them causes the graph to highlight the affected links.
					| The visualization is done using the 
					strong Force-Directed Layout
					|  of 
					a(href="http://d3js.org/",target="_blank") D3.js
					| . It is in general 
					| used for physical simulations, as one can manipulate the charge of nodes and the friction of 
					| the “surface”. The presented solution is configured in a way that links force nodes to stick 
					| together, whereas the nodes themselves repel each other. As the negative charge (repelling 
					| factor) is high, the graph tends to be planar most of the time. There is no way to assure 
					| that the simulation process terminates with a planar visualization, but the parameter is 
					| chosen in a way that it does so most of the time. 
					| The colors and images can be changed in the configuration. In order to get a more adequate topology representation, there is this way of associating arbitrary data with unique 
					strong DeviceIDs
					|  or patterns of them. For example one can associate a color with a range of 
					strong DeviceIDs 
					|  to mark a set of devices that is at a specific physical location. 
					| All elements feature tooltips that display details of either links or nodes. Furthermore, 
					| nodes can be moved around to arrange the view and specific nodes can be triggered to 
					| stick at their current location. This, together with some brief statistics on element counts, 
					| completes this view.


				h3 Statistics
				p Whereas the topology is giving a broad view of the network, the statistics view contains 
					| more detailed information on the individual elements. The entities are grouped by type 
					| and displayed in either tabular fashion or by a grid of thumbnails. Furthermore, it offers 
					| searching capabilities that filter on names and DeviceIDs which makes it easy to find a 
					| specific client or switch.

				h3 Status
				p Across the application there is a small box in the header that displays the last update time
					| stamp as well as an ok-sign. As soon as there is an issue with the application this turns
					| into a red error time stamp and a user might click on this to get further information. By
					| clicking the link, the status view can be accessed. This page contains information on the
					| controller, as name, type and monitored networks. Furthermore one can see the status of
					| the model synchronisation between backend and client. This view also features a logging
					| which exposes errors that happened since the last complete reload of the page. As this is a
					| single-page application the lifetime of a page is long, so accumulating logs without external
					| storage is appropriate.

				h3 Detail
				p As the visualization contains many different entities with extensive sets of properties, most of them come with a dedicated detail view.

				h4 Device
				p The device detail view shows extended information of the device itself, e.g. purpose
					| and location. Connection information for clients is given, which includes the 
					strong attached OpenFlow switch
					|  and configured 
					strong IP
					| . In addition to that, there is a list of connected
					| devices, which allows the user to navigate from device to device, without having to
					| go back to topology or statistics view. Finally, there is a button to add or edit the
					| augmented information directly. The button opens the configuration view, where a
					| new pattern for exactly this device appears or is marked, if there is already one for
					| this specific 
					strong DeviceID
					| .

				h4 Link
				p The link detail view contains thumbnails for the connected devices, as well as information on the links parameters. The latter includes packet loss, delay, and data
					| rates for transmission and receiving. The packet loss and delay parameters can be
					| changed, but this requires the visualization to run on the same device than the controller. This is due to the fact, that these parameters can only be changed using local
					| bash scripts.

				h4 Flow
				p The flow detail view displays all flow parameters in a clear manner. There are no interactions at the moment, but at a later stage they can be added here.

				h2#usage-configuration Configuration
				p The configuration view contains many different aspects of the application that can be personalized for any given installation. <br/>
					| In addition to that configuration profile can be imported/exported. The configurable parameters includes:

				h3 Controller Connection Parameters
				p Here one can configure the IP, port and the controller's name.

				h3 Node Information Management
				p The configuration view enables the user to add information to specific nodeIds or respective patterns. This includes information like name, type, location, and purpose.

				hr

				h1#resources Resources

				h2#resources-openflow OpenFlow
				ul
					li
						a(href="https://www.opennetworking.org/", target="_blank") Open Networking Foundation
					li
						a(href="https://www.opennetworking.org/sdn-resources/onf-specifications/openflow", target="_blank") OpenFlow Specification
